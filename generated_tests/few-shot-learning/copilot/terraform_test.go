package test

import (
	"testing"

	"github.com/gruntwork-io/terratest/modules/terraform"
	"github.com/stretchr/testify/assert"
)

func TestTerraform(t *testing.T) {
	//awsRegion := "us-east-1" - Unused variable generated by the LLM

	terraformOptions := &terraform.Options{
		//TerraformDir: "../",
		TerraformDir: "../../../",
	}

	defer terraform.Destroy(t, terraformOptions)
	terraform.InitAndApply(t, terraformOptions)

	vpcID := terraform.Output(t, terraformOptions, "vpc_id")
	assert.NotEmpty(t, vpcID)

	albSgID := terraform.Output(t, terraformOptions, "alb_sg_id")
	assert.NotEmpty(t, albSgID)

	appSgID := terraform.Output(t, terraformOptions, "app_sg_id")
	assert.NotEmpty(t, appSgID)

	appAlbDNSName := terraform.Output(t, terraformOptions, "app_alb_dns_name")
	assert.NotEmpty(t, appAlbDNSName)

	appTgArn := terraform.Output(t, terraformOptions, "app_tg_arn")
	assert.NotEmpty(t, appTgArn)

	appListenerArn := terraform.Output(t, terraformOptions, "app_listener_arn")
	assert.NotEmpty(t, appListenerArn)

	s3BucketName := terraform.Output(t, terraformOptions, "s3_bucket_name")
	assert.NotEmpty(t, s3BucketName)

	launchTemplateID := terraform.Output(t, terraformOptions, "launch_template_id")
	assert.NotEmpty(t, launchTemplateID)

	autoscalingGroupName := terraform.Output(t, terraformOptions, "autoscaling_group_name")
	assert.NotEmpty(t, autoscalingGroupName)

	s3FullAccessPolicyArn := terraform.Output(t, terraformOptions, "s3_full_access_policy_arn")
	assert.NotEmpty(t, s3FullAccessPolicyArn)

	iamUserName := terraform.Output(t, terraformOptions, "iam_user_name")
	assert.NotEmpty(t, iamUserName)

	s3BucketPolicyID := terraform.Output(t, terraformOptions, "s3_bucket_policy_id")
	assert.NotEmpty(t, s3BucketPolicyID)

	albSgIngressRules := terraform.OutputList(t, terraformOptions, "alb_sg_ingress_rules")
	assert.NotEmpty(t, albSgIngressRules)

	albSgEgressRules := terraform.OutputList(t, terraformOptions, "alb_sg_egress_rules")
	assert.NotEmpty(t, albSgEgressRules)

	appSgIngressRulesFromHTTPPort := terraform.Output(t, terraformOptions, "app_sg_ingress_rules_from_http_port")
	assert.Equal(t, "80", appSgIngressRulesFromHTTPPort)

	appSgIngressRulesToHTTPPort := terraform.Output(t, terraformOptions, "app_sg_ingress_rules_to_http_port")
	assert.Equal(t, "80", appSgIngressRulesToHTTPPort)

	albSgIngressRulesFromHTTPPort := terraform.Output(t, terraformOptions, "alb_sg_ingress_rules_from_http_port")
	assert.Equal(t, "80", albSgIngressRulesFromHTTPPort)

	albSgIngressRulesToHTTPPort := terraform.Output(t, terraformOptions, "alb_sg_ingress_rules_to_http_port")
	assert.Equal(t, "80", albSgIngressRulesToHTTPPort)
}
